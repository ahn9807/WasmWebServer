#ifndef WASM_SERVER_H_GENERATED_
#define WASM_SERVER_H_GENERATED_
/* Automically generated by wasm2c */
#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>

#include "wasm-rt.h"

#ifndef WASM_RT_MODULE_PREFIX
#define WASM_RT_MODULE_PREFIX tiny_
#endif

#define WASM_RT_PASTE_(x, y) x ## y
#define WASM_RT_PASTE(x, y) WASM_RT_PASTE_(x, y)
#define WASM_RT_ADD_PREFIX(x) WASM_RT_PASTE(WASM_RT_MODULE_PREFIX, x)

/* TODO(binji): only use stdint.h types in header */
typedef uint8_t u8;
typedef int8_t s8;
typedef uint16_t u16;
typedef int16_t s16;
typedef uint32_t u32;
typedef int32_t s32;
typedef uint64_t u64;
typedef int64_t s64;
typedef float f32;
typedef double f64;

extern void WASM_RT_ADD_PREFIX(init)(void);

/* import: 'env' 'sys_setsockopt' */
extern u32 (*Z_envZ_sys_setsockoptZ_iiiiii)(u32, u32, u32, u32, u32);
/* import: 'env' 'sys_bind' */
extern u32 (*Z_envZ_sys_bindZ_iiii)(u32, u32, u32);
/* import: 'env' 'sys_listen' */
extern u32 (*Z_envZ_sys_listenZ_iii)(u32, u32);
/* import: 'env' 'sys_accept' */
extern u32 (*Z_envZ_sys_acceptZ_iiii)(u32, u32, u32);
/* import: 'env' 'sys_write' */
extern u32 (*Z_envZ_sys_writeZ_iiii)(u32, u32, u32);
/* import: 'env' 'sys_read' */
extern u32 (*Z_envZ_sys_readZ_iiii)(u32, u32, u32);
/* import: 'env' 'sys_close' */
extern u32 (*Z_envZ_sys_closeZ_ii)(u32);
/* import: 'env' 'sys_exit' */
extern void (*Z_envZ_sys_exitZ_vi)(u32);
/* import: 'env' 'sys_stat' */
extern u32 (*Z_envZ_sys_statZ_iii)(u32, u32);
/* import: 'env' 'sys_mmap' */
extern u32 (*Z_envZ_sys_mmapZ_iiiiiij)(u32, u32, u32, u32, u32, u64);
/* import: 'env' 'sys_munmap' */
extern u32 (*Z_envZ_sys_munmapZ_iii)(u32, u32);
/* import: 'wasi_snapshot_preview1' 'fd_close' */
extern u32 (*Z_wasi_snapshot_preview1Z_fd_closeZ_ii)(u32);
/* import: 'wasi_snapshot_preview1' 'fd_seek' */
extern u32 (*Z_wasi_snapshot_preview1Z_fd_seekZ_iijii)(u32, u64, u32, u32);
/* import: 'wasi_snapshot_preview1' 'fd_write' */
extern u32 (*Z_wasi_snapshot_preview1Z_fd_writeZ_iiiii)(u32, u32, u32, u32);
/* import: 'wasi_snapshot_preview1' 'proc_exit' */
extern void (*Z_wasi_snapshot_preview1Z_proc_exitZ_vi)(u32);
/* import: 'env' '__syscall_socket' */
extern u32 (*Z_envZ___syscall_socketZ_iiiiiii)(u32, u32, u32, u32, u32, u32);

/* export: 'memory' */
extern wasm_rt_memory_t (*WASM_RT_ADD_PREFIX(Z_memory));
/* export: 'server_main' */
extern u32 (*WASM_RT_ADD_PREFIX(Z_server_mainZ_ii))(u32);
/* export: 'server_worker' */
extern u32 (*WASM_RT_ADD_PREFIX(Z_server_workerZ_ii))(u32);
/* export: 'malloc' */
extern u32 (*WASM_RT_ADD_PREFIX(Z_mallocZ_ii))(u32);
/* export: '__indirect_function_table' */
extern wasm_rt_table_t (*WASM_RT_ADD_PREFIX(Z___indirect_function_table));
/* export: '_initialize' */
extern void (*WASM_RT_ADD_PREFIX(Z__initializeZ_vv))(void);
/* export: '__errno_location' */
extern u32 (*WASM_RT_ADD_PREFIX(Z___errno_locationZ_iv))(void);
/* export: 'stackSave' */
extern u32 (*WASM_RT_ADD_PREFIX(Z_stackSaveZ_iv))(void);
/* export: 'stackRestore' */
extern void (*WASM_RT_ADD_PREFIX(Z_stackRestoreZ_vi))(u32);
/* export: 'stackAlloc' */
extern u32 (*WASM_RT_ADD_PREFIX(Z_stackAllocZ_ii))(u32);
/* export: 'emscripten_stack_init' */
extern void (*WASM_RT_ADD_PREFIX(Z_emscripten_stack_initZ_vv))(void);
/* export: 'emscripten_stack_get_free' */
extern u32 (*WASM_RT_ADD_PREFIX(Z_emscripten_stack_get_freeZ_iv))(void);
/* export: 'emscripten_stack_get_end' */
extern u32 (*WASM_RT_ADD_PREFIX(Z_emscripten_stack_get_endZ_iv))(void);
#ifdef __cplusplus
}
#endif

#endif  /* WASM_SERVER_H_GENERATED_ */
